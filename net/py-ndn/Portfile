# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0
PortGroup               python 1.0
PortGroup               github 1.0

github.setup            named-data PyCCN v0.3
checksums               rmd160  60ac054e7def2c3993337b5f00863eb5a055d4f6 \
                        sha256  99ad8bdf2f15e7eb601aa7b6465d6763a7a13ef9dcd957e9677636c6a6f3efcd

name                    py-ndn
homepage                https://github.com/named-data/PyCCN
license                 BSD
version                 0.3

python.versions         27
python.default_version  27

categories	            net ccnx python
platforms	            darwin
maintainers             ucla.edu:alexander.afanasyev

description	            PyNDN (aka PyCCN) - NDN bindings for Python

long_description        A "thin" implementation, which supports Python \
                        objects corresponding to the major NDNx entities - Interest, ContentObject, and \
                        so on, as well as some support objects.  The C code is mostly just responsible \
                        for marshaling data back and forth between the formats, though there are some \
                        useful functions for key generation/access included.

depends_lib-append	    port:ccnx

use_configure           yes

configure.cmd           ./waf configure

pre-configure {
    configure.env-append    PYTHONDIR=${python.pkgd} \
                            PYTHONARCHDIR=${python.pkgd}
    configure.python        ${python.bin}
}

configure.args-append   --ndnx=${prefix} \
                        --openssl=${prefix}

build.cmd               ./waf
build.target            build

destroot.cmd            ./waf
destroot.target         install
destroot.destdir        --destdir=${destroot}

